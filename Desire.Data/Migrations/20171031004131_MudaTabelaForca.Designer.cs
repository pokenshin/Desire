// <auto-generated />
using Desire.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace Desire.Data.Migrations
{
    [DbContext(typeof(SQLiteContext))]
    [Migration("20171031004131_MudaTabelaForca")]
    partial class MudaTabelaForca
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Desire.Core.Forca", b =>
                {
                    b.Property<int>("Pontos")
                        .ValueGeneratedOnAdd();

                    b.Property<char>("Classe");

                    b.Property<int>("Nivel");

                    b.HasKey("Pontos");

                    b.ToTable("TabelaForca");
                });

            modelBuilder.Entity("Desire.Core.Forca", b =>
                {
                    b.OwnsOne("Desire.Core.ValorMag", "BonusAP", b1 =>
                        {
                            b1.Property<int>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("BonusAP")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Desire.Core.ValorMag", "Dureza", b1 =>
                        {
                            b1.Property<int?>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("Dureza")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Desire.Core.ValorMag", "Golpe", b1 =>
                        {
                            b1.Property<int?>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("Golpe")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Desire.Core.ValorMag", "Porcentagem", b1 =>
                        {
                            b1.Property<int?>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("Porcentagem")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Desire.Core.ValorMag", "Potencia", b1 =>
                        {
                            b1.Property<int?>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("Potencia")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Desire.Core.ValorMag", "Sustentacao", b1 =>
                        {
                            b1.Property<int?>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("Sustentacao")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Desire.Core.ValorMag", "Vigor", b1 =>
                        {
                            b1.Property<int?>("ForcaPontos");

                            b1.Property<int>("Magnitude");

                            b1.Property<int>("Valor");

                            b1.ToTable("TabelaForca");

                            b1.HasOne("Desire.Core.Forca")
                                .WithOne("Vigor")
                                .HasForeignKey("Desire.Core.ValorMag", "ForcaPontos")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
